# -*- coding: utf-8 -*-
"""
Created on Wed Jun 13 19:42:20 2018

@author: Liu Haotian
Id:2017202020005

Subject 2:optimization problem
Homework4:Bowell
"""

from pylab import *

class parameter_in:
    def __init__(self,_A1=0,_A2=0,_A3=0,_B1=0,_B2=0,_C=0):
        self.A1=_A1
        self.A2=_A2
        self.A3=_A3
        self.B1=_B1
        self.B2=_B2
        self.C=_C

class initial_point:
    def __init__(self,_b1=0,_b2=0):
        self.b1=_b1
        self.b2=_b2

class s_matrix:
    def __init__(self,_c1=0,_c2=0):
        self.c1=_c1
        self.c2=_c2

class cal:
    def __init__(self,_P=parameter_in(0,0,0,0,0,0),_Ip=initial_point(0,0),_sm=s_matrix(0,0),_t=0.1):
        self.t=_t
        self.P=[]
        self.b=[]
        self.P.append(_P)
        self.b.append(_Ip)
        self.func=[]
        self.det=[]
        self.smat=[]
        self.smat.append(_sm)
        self.smat.append(s_matrix(1,0))
        self.smat.append(s_matrix(0,1))
        self.F1=[]
        self.F2=[]
        self.F3=[]

    def calculate(self,current_state,s_state):
        alp=-(2*current_state.b1*self.P[-1].A1*s_state.c1+self.P[-1].A3*current_state.b2*s_state.c1+self.P[-1].B1*s_state.c1+current_state.b1*self.P[-1].A3*s_state.c2+2*self.P[-1].A2*current_state.b2*s_state.c2+self.P[-1].B2*s_state.c2)/2/(self.P[-1].A1*s_state.c1*s_state.c1+s_state.c2*self.P[-1].A3*s_state.c1+self.P[-1].A2*s_state.c2*s_state.c2)
        next_b1=current_state.b1+alp*s_state.c1
        next_b2=current_state.b2+alp*s_state.c2
        return initial_point(next_b1,next_b2)
    
    def find_solution(self):
        j=1
        func_value=self.P[-1].A1*self.b[-1].b1*self.b[-1].b1+self.P[-1].A2*self.b[-1].b2*self.b[-1].b2+self.P[-1].A3*self.b[-1].b1*self.b[-1].b2+self.P[-1].B1*self.b[-1].b1+self.P[-1].B2*self.b[-1].b2+self.P[-1].C
        self.func.append(func_value)
        while j > self.t:
            i=2
            while i >0:
                self.b.append(self.calculate(self.b[-1],self.smat[-i]))
                func_value=self.P[-1].A1*self.b[-1].b1*self.b[-1].b1+self.P[-1].A2*self.b[-1].b2*self.b[-1].b2+self.P[-1].A3*self.b[-1].b1*self.b[-1].b2+self.P[-1].B1*self.b[-1].b1+self.P[-1].B2*self.b[-1].b2+self.P[-1].C
                self.func.append(func_value)
                self.det.append(self.func[-2]-self.func[-1])
                i=i-1
            if self.det[-2]>self.det[-1]:
                ii=2
                det=self.det[-2]
            else:
                ii=1
                det=self.det[-1]
            self.smat.append(s_matrix(self.b[-1].b1-self.b[-3].b1,self.b[-1].b2-self.b[-3].b2))
            self.b.append(self.calculate(self.b[-1],self.smat[-1]))
            func_value=self.P[-1].A1*self.b[-4].b1*self.b[-4].b1+self.P[-1].A2*self.b[-4].b2*self.b[-4].b2+self.P[-1].A3*self.b[-4].b1*self.b[-4].b2+self.P[-1].B1*self.b[-4].b1+self.P[-1].B2*self.b[-4].b2+self.P[-1].C
            self.F1.append(func_value)
            func_value=self.P[-1].A1*self.b[-2].b1*self.b[-2].b1+self.P[-1].A2*self.b[-2].b2*self.b[-2].b2+self.P[-1].A3*self.b[-2].b1*self.b[-2].b2+self.P[-1].B1*self.b[-2].b1+self.P[-1].B2*self.b[-2].b2+self.P[-1].C
            self.F2.append(func_value)
            self.b.append(initial_point(2*self.b[-2].b1-self.b[-4].b1,2*self.b[-2].b1-self.b[-4].b1))
            func_value=self.P[-1].A1*self.b[-1].b1*self.b[-1].b1+self.P[-1].A2*self.b[-1].b2*self.b[-1].b2+self.P[-1].A3*self.b[-1].b1*self.b[-1].b2+self.P[-1].B1*self.b[-1].b1+self.P[-1].B2*self.b[-1].b2+self.P[-1].C
            self.F3.append(func_value)
            if self.F3[-1] >= self.F1[-1] or (self.F1[-1]-2*self.F2[-1]+self.F3[-1])*(self.F1[-1]-self.F2[-1]-det)*(self.F1[-1]-self.F2[-1]-det)>=det/2*(self.F1[-1]-self.F3[-1])*(self.F1[-1]-self.F3[-1]):
                self.smat.append(self.smat[-3])
                self.smat.append(self.smat[-3])
                if self.F2[-1]<self.F3[-1]:
                    self.b.append(self.b[-2])
                else:
                    self.b.append(initial_point(2*self.b[-2].b1-self.b[-4].b1,2*self.b[-2].b2-self.b[-4].b2))
            elif ii<2:
                self.b.append(self.b[-1])
                self.smat.append(self.smat[-2])
                self.smat.append(self.smat[-2])
            else :
                self.b.append(self.b[-1])
                self.smat.append(self.smat[-3])
                self.smat.append(self.smat[-2])        
            j=sqrt(abs((self.b[-4].b1-self.b[-6].b1)*(self.b[-4].b1-self.b[-6].b1)+(self.b[-4].b2-self.b[-6].b2)*(self.b[-4].b2-self.b[-6].b2)))
            print(j)
            print(self.b[-3].b1,self.b[-3].b2)

a=cal(parameter_in(1,1,-1,-10,-4,60),initial_point(0,0),_t=0.001)
a.find_solution()

"""
The output is below:
6.72681202354
7.472527472527473 6.725274725274725
1.04316048345
8.225590894331175 6.26506930083913
0.21950328026
8.10353520611438 6.004313966921433
0.101429839437
8.000487670206699 6.001025215775443
0.000769316120124
8.000512216595054 6.00026836880113
We can get the solution is (8.000512216595054,6.00026836880113), right answer is (8,6).
We can consider it as the same result at a small precision range.
"""
